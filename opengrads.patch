Index: acinclude.m4
===================================================================
RCS file: /cvsroot/opengrads/grads/acinclude.m4,v
retrieving revision 1.13
diff -u -r1.13 acinclude.m4
--- acinclude.m4	3 Sep 2007 20:46:32 -0000	1.13
+++ acinclude.m4	26 Oct 2007 11:23:27 -0000
@@ -262,6 +262,31 @@
 ])
 
 
+dnl GA_CHECK_SHAPE : Checks whether GrADS can be built with SHAPEFILE features 
+dnl dnl                     enabled.
+dnl dnl  args :             action-if-yes, action-if-no
+AC_DEFUN([GA_CHECK_SHAPE],
+[
+   # Check libs and headers for SHAPEFILE usage
+   GA_SET_FLAGS
+
+   ga_check_shape="no"
+   AC_CHECK_HEADER(libshp/shapefil.h,
+   [ AC_CHECK_LIB(shp,SHPOpen,
+     [ ga_check_shape="yes"
+     ])
+   ])
+
+   if test $ga_check_shape = "yes" ; then
+     $1 
+     true #dummy command
+   else
+     $2
+     true #dummy command
+   fi
+   GA_UNSET_FLAGS
+])
+
 
 dnl GA_CHECK_GD : Checks whether GrADS can be built with printim command 
 dnl  		      	enabled.
@@ -305,8 +330,8 @@
   GA_SET_FLAGS([],[$X_CFLAGS], [$X_LIBS],[$X_PRE_LIBS -lX11 $X_EXTRA_LIBS])
 
   ga_check_img="no"
-  AC_CHECK_HEADER(magick.h,
-  [ AC_CHECK_HEADER(api.h,
+  AC_CHECK_HEADER(magick/ImageMagick.h,
+  [ AC_CHECK_HEADER(magick/api.h,
     [ GA_CHECK_LIB(jpeg,jpeg_write_scanlines,
       [ AC_CHECK_LIB(Xext, main, 
         [ GA_CHECK_LIB(Magick,main,
@@ -463,3 +488,15 @@
   GA_UNSET_FLAGS
 ])
 
+m4_include([m4/Xaw.m4])
+m4_include([m4/ga_lib_readline.m4])
+m4_include([m4/gd.m4])
+m4_include([m4/hdf4.m4])
+m4_include([m4/libdap.m4])
+m4_include([m4/libnc-dap.m4])
+m4_include([m4/libnc-dap_header.m4])
+m4_include([m4/libsx.m4])
+m4_include([m4/netcdf.m4])
+m4_include([m4/netcdf_header.m4])
+m4_include([m4/pkg.m4])
+m4_include([m4/udunits.m4])
Index: aclocal.m4
===================================================================
RCS file: /cvsroot/opengrads/grads/aclocal.m4,v
retrieving revision 1.8
diff -u -r1.8 aclocal.m4
--- aclocal.m4	28 Aug 2007 16:20:25 -0000	1.8
+++ aclocal.m4	26 Oct 2007 11:23:28 -0000
@@ -613,16 +613,4 @@
 AC_SUBST([am__untar])
 ]) # _AM_PROG_TAR
 
-m4_include([m4/Xaw.m4])
-m4_include([m4/ga_lib_readline.m4])
-m4_include([m4/gd.m4])
-m4_include([m4/hdf4.m4])
-m4_include([m4/libdap.m4])
-m4_include([m4/libnc-dap.m4])
-m4_include([m4/libnc-dap_header.m4])
-m4_include([m4/libsx.m4])
-m4_include([m4/netcdf.m4])
-m4_include([m4/netcdf_header.m4])
-m4_include([m4/pkg.m4])
-m4_include([m4/udunits.m4])
 m4_include([acinclude.m4])
Index: configure.ac
===================================================================
RCS file: /cvsroot/opengrads/grads/configure.ac,v
retrieving revision 1.9
diff -u -r1.9 configure.ac
--- configure.ac	1 Sep 2007 06:09:44 -0000	1.9
+++ configure.ac	26 Oct 2007 11:23:42 -0000
@@ -402,6 +402,22 @@
   echo "- LATS disabled"
   use_lats=no
 fi
+echo
+
+use_shape=no
+if test "$with_shape" != "no" ; then
+  echo "Check GrADS support for shapefile in polyf..."
+  GA_CHECK_SHAPE([use_shape=yes])
+fi
+if test $use_shape = "yes" ; then
+  echo "+ Shapefile support in polyf enabled"
+  GA_SET_LIB_VAR(shape_libs, shp)
+  AC_SUBST(shape_libs)
+  AC_DEFINE(USESHAPE, 1, [Support for shapefile in polyf])
+else
+  echo "- Shapefile support in polyf disabled"
+  AC_DEFINE(USESHAPE, 0, [Support for shapefile in polyf])
+fi
 
 echo
 echo Checking which GrADS binaries can be built
@@ -560,6 +576,7 @@
 AM_CONDITIONAL(USEGUI,   [ test "$use_gui"  = "yes" ] )
 AM_CONDITIONAL(GXPNG,    [ test "$use_printim"  = "yes" ] )
 AM_CONDITIONAL(USEIMG,   [ test "$use_wi"  = "yes" ] )
+AM_CONDITIONAL(USESHAPE, [ test "$use_shape"  = "yes" ] )
 AM_CONDITIONAL(USELATS,  [ test "$use_lats" = "yes" ] )
 AM_CONDITIONAL(USEGADAP, [ test "$use_gadap" = "yes" ] )
 AM_CONDITIONAL(XLIBEMU,  [ test "$use_xlibemu" = "yes" ] )
@@ -621,6 +638,11 @@
 else
    echo "  |  - LATS disabled                 |"
 fi 
+if test "$use_shape" = "yes" ; then
+   echo "  |  + shape file enabled in polyf   |"
+else
+   echo "  |  - shape file disabled in polyf  |"
+fi
 if test "$use_wi" = "yes" ; then
    echo "  |  + wi enabled (deprecated)       |"
 else
Index: src/Makefile.am
===================================================================
RCS file: /cvsroot/opengrads/grads/src/Makefile.am,v
retrieving revision 1.9
diff -u -r1.9 Makefile.am
--- src/Makefile.am	1 Sep 2007 06:09:54 -0000	1.9
+++ src/Makefile.am	26 Oct 2007 11:25:28 -0000
@@ -47,7 +47,7 @@
 
 # Settings used for all GrADS binaries
 common_ldadd =            $(LDADD) $(X_LIBS) $(GD_LDFLAGS) $(printim_libs) \
-			$(gui_libs) $(wi_libs) $(readline_libs) \
+			$(shape_libs) $(gui_libs) $(wi_libs) $(readline_libs) \
 			$(wi_libadd) $(grads_xlibs) \
 			$(xlibemu_libs)
 
Index: src/config.h.in
===================================================================
RCS file: /cvsroot/opengrads/grads/src/config.h.in,v
retrieving revision 1.8
diff -u -r1.8 config.h.in
--- src/config.h.in	28 Aug 2007 16:31:53 -0000	1.8
+++ src/config.h.in	26 Oct 2007 11:25:30 -0000
@@ -133,6 +133,9 @@
 /* Enable LATS */
 #undef USELATS
 
+/* Support for shapefile in polyf */
+#undef USESHAPE
+
 /* Define to 1 if your processor stores words with the most significant byte
    first (like Motorola and SPARC, unlike Intel and VAX). */
 #undef WORDS_BIGENDIAN
Index: src/gacfg.c
===================================================================
RCS file: /cvsroot/opengrads/grads/src/gacfg.c,v
retrieving revision 1.5
diff -u -r1.5 gacfg.c
--- src/gacfg.c	26 Aug 2007 23:32:03 -0000	1.5
+++ src/gacfg.c	26 Oct 2007 11:25:35 -0000
@@ -170,6 +170,13 @@
         gaprnt(verbose,cmd);
 }
 
+if(USESHAPE)
+     sprintf(cmd,"   o SHAPE FILE access (http://shapelib.maptools.org/) ENABLED.\n ");
+ else
+     sprintf(cmd,"   o SHAPE FILE access (http://shapelib.maptools.org/) DISABLED.\n ");
+gaprnt(verbose,cmd);
+
+
 if(USEGUI)
     sprintf(cmd,"   o DAO (http://dao.gsfc.nasa.gov) Athena Widget GUI ENABLED.\n ");
 else
Index: src/gaimg.c
===================================================================
RCS file: /cvsroot/opengrads/grads/src/gaimg.c,v
retrieving revision 1.3
diff -u -r1.3 gaimg.c
--- src/gaimg.c	24 Aug 2007 16:45:52 -0000	1.3
+++ src/gaimg.c	26 Oct 2007 11:25:44 -0000
@@ -221,9 +221,9 @@
 #include <string.h>
 #include <X11/Xlib.h>
 #if GRADS_HP64
-#include <api.h>
+#include <magick/api.h>
 #endif
-#include <magick.h>
+#include <magick/ImageMagick.h>
 #include "grads.h"
 
 extern Display       *display;    /* defined in gxX.c */
@@ -267,6 +267,7 @@
 img_write ( char *filename )
 {
    Image      *image;
+   XImportInfo xinfo;
    ImageInfo  image_info;
    char       msg[512], fname[512];
    unsigned int status;
@@ -277,8 +278,9 @@
    if ( strchr(fname,'.') == NULL ) strcat(fname,".gif");
 
    GetImageInfo(&image_info);  /* initializes image info */
+   XGetImportInfo(&xinfo);
 
-   image = XGetWindowImage(display, win, 0, 0); /* retrieve image */
+   image = XImportImage(&image_info, &xinfo); /* retrieve image */
    if ( image == (Image *) NULL ) {
         gaprnt(0,"IMG Error: failed to get X image!\n");
         return 1;
Index: src/gasdf.c
===================================================================
RCS file: /cvsroot/opengrads/grads/src/gasdf.c,v
retrieving revision 1.7
diff -u -r1.7 gasdf.c
--- src/gasdf.c	25 Aug 2007 02:39:13 -0000	1.7
+++ src/gasdf.c	26 Oct 2007 11:25:51 -0000
@@ -5787,7 +5787,12 @@
   /* Turn off automatic error handling. */
   ncopts = 0;
 
+#if USEHDF == 1
   if (ncattname (cdfid, varid, attnum, name) == -1) {
+#else
+  if (nc_inq_attname(cdfid, varid, attnum, name) == -1) {
+#endif
+
     ncopts = oldncopts ;
     return Failure;
   }
@@ -5815,10 +5820,23 @@
   /* Turn off automatic error handling. */
   ncopts = 0;
 
+#if USEHDF == 1
   if (ncattinq (cdfid, varid, aname, atype, alen) == -1) {
     ncopts = oldncopts ;
     return Failure;
   }
+#else
+  if (nc_inq_atttype(cdfid, varid, aname, atype) != NC_NOERR) {
+    ncopts = oldncopts ;
+    return Failure;
+  }
+  size_t templen;
+  if (nc_inq_attlen(cdfid, varid, aname, &templen) != NC_NOERR) {
+    ncopts = oldncopts ;
+    return Failure;
+  }
+  *alen = (int) templen;
+#endif
 
   /* Allocate space for values. */
   if ((*atype == NC_BYTE) || (*atype == NC_CHAR))  {
@@ -5840,12 +5858,68 @@
     ncopts = oldncopts ;
     return Failure;
   }
-
+#if USEHDF == 1
   /* Retrieve values. */
   if (ncattget (cdfid, varid, aname, (void *) (*adata)) == -1) {
     ncopts = oldncopts ;
     return Failure;
   }
+#else
+  switch (*atype)
+  {
+     case NC_BYTE:
+       if (nc_get_att_uchar(cdfid, varid, aname,
+             (unsigned char *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     case NC_CHAR:
+       if (nc_get_att_text(cdfid, varid, aname, (char *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     case NC_SHORT:
+       if (nc_get_att_short(cdfid, varid, aname, (short *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     case NC_LONG:
+       if (nc_get_att_int(cdfid, varid, aname, (int *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     case NC_FLOAT:
+       if (nc_get_att_float(cdfid, varid, aname, (float *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     case NC_DOUBLE:
+       if (nc_get_att_double(cdfid, varid, aname,
+             (double *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+     default:
+       if (nc_get_att_text(cdfid, varid, aname, (char *) *adata) != NC_NOERR)
+       {
+         ncopts = oldncopts ;
+         return Failure;
+       }
+       break;
+  }
+#endif
 
   /* If character, set last byte to null. */
   if (*atype == NC_CHAR)  {
Index: src/gauser.c
===================================================================
RCS file: /cvsroot/opengrads/grads/src/gauser.c,v
retrieving revision 1.9
diff -u -r1.9 gauser.c
--- src/gauser.c	14 Oct 2007 22:41:13 -0000	1.9
+++ src/gauser.c	26 Oct 2007 11:25:55 -0000
@@ -42,6 +42,16 @@
 #include "lats.h"
 #endif
 
+#if USESHAPE == 1
+#include <libshp/shapefil.h>
+inline static float normal_lon(float lon)
+{
+  if (lon < -180.0 || lon > 180.0)
+    return fmodf(lon, 360.0);
+  return lon;
+}
+#endif
+
 /* int gxhpng (char *, int, int, int, int); */
 
 /*mf 971022 --- expose Mike Fiorino's global struct to these routines for warning level setting mf*/
@@ -1077,28 +1087,200 @@
     return (1);
   }
   if (cmpwrd("polyf",oper) || cmpwrd("mappoly",oper)) {
-    i = 0;
+
+    int narg = 0;
+    int vcount = 0;
+
     ccmd = cmd;
-    while ( (ccmd = nxtwrd (ccmd)) != NULL) i++;
-    if (i<6) {
-      gaprnt (0,"DRAW error: Syntax is DRAW POLYF x1 y1 x2 y2 ...\n");
-      return (1);
+    while ( (ccmd = nxtwrd (ccmd)) != NULL) narg++;
+#if USESHAPE == 1
+    if (narg==1 || narg==3)
+    {
+      SHPHandle hSHP;
+      int nShapeType, nshp, nobj, npart, pstart, nvert, ivert;
+      double adfMinBound[4], adfMaxBound[4];
+      float shplon, shplat;
+      char shpname[1024];
+      char message[2048];
+
+      sscanf(nxtwrd(cmd), "%s", shpname);
+      sprintf(message, "Using shapefile %s\n", gxgnam(shpname));
+      gaprnt (0,message);
+
+      hSHP = SHPOpen(gxgnam(shpname), "rb");
+      if (hSHP == NULL)
+      {
+        gaprnt (0,"SHAPEFILE not found.\n");
+        gaprnt (0,"DRAW error: Syntax is DRAW POLYF shapefile object part\n");
+        return (1);
+      }
+
+      SHPGetInfo(hSHP, &nshp, &nShapeType, adfMinBound, adfMaxBound);
+
+      if (narg == 1)
+      {
+        int ocount, pcount;
+        for (ocount = 0; ocount < nshp; ocount ++)
+        {
+          SHPObject *psShape;
+          psShape = SHPReadObject(hSHP, ocount);
+
+          for (pcount = 0; pcount < psShape->nParts; pcount ++)
+          {
+            pstart = psShape->panPartStart[pcount];
+            if (pcount == psShape->nParts-1)
+              nvert = psShape->nVertices-pstart;
+            else
+              nvert = psShape->panPartStart[pcount+1]-pstart;
+            if (nvert == 0) continue;
+
+            xy = (float *)malloc(2*sizeof(float)*(nvert+2));
+            if (xy==NULL) {
+              gaprnt (0,"DRAW error: Memory allocation error\n");
+              return (1);
+            }
+
+            vcount = 0;
+            for (ivert = 0; ivert < nvert; ivert ++)
+            {
+              shplon = psShape->padfX[ivert+pstart];
+              shplat = psShape->padfY[ivert+pstart];
+              if ((normal_lon(shplon) >= normal_lon(pcm->dmin[0]) &&
+                   normal_lon(shplon) <= normal_lon(pcm->dmax[0])) &&
+                  (shplat >= pcm->dmin[1] && shplat <= pcm->dmax[1]))
+              {
+                gxconv (normal_lon(shplon), shplat, &x, &y, 2);
+                xy[vcount]   = x;
+                xy[vcount+1] = y;
+                vcount += 2;
+              }
+            }
+
+            if (vcount == 0)
+            {
+              free(xy);
+              continue;
+            }
+
+            cnt = vcount/2;
+            if (*xy != *(xy+(cnt-1)*2) || *(xy+1) != *(xy+(cnt-1)*2+1)) {
+              *(xy+cnt*2) = *xy;
+              *(xy+cnt*2+1) = *(xy+1);
+              cnt++;
+            }
+
+            gxcolr (pcm->lincol);
+            if (pcm->ptflg) gxptrn (pcm->ptopt,pcm->ptden,pcm->ptang);
+            gxfill (xy,cnt);
+            if (pcm->ptflg) gxptrn (1,1,0);
+            free (xy);
+          }
+          SHPDestroyObject(psShape);
+        }
+        SHPClose(hSHP);
+        return(0);
+      }
+      else if (narg == 3)
+      {
+        SHPObject *psShape;
+        cmd = nxtwrd(cmd);
+        cmd = nxtwrd(cmd);
+
+        if (intprs(cmd, &nobj) == NULL)
+        {
+          SHPClose(hSHP);
+          gaprnt (0,"DRAW error: Invalid object number in shapefile\n");
+          return (1);
+        }
+        cmd = nxtwrd(cmd);
+        if (intprs(cmd, &npart) == NULL)
+        {
+          SHPClose(hSHP);
+          gaprnt (0,"DRAW error: Invalid part of object number\n");
+          return (1);
+        }
+        if (nobj < 0 || nobj >= nshp)
+        {
+          SHPClose(hSHP);
+          gaprnt (0,"DRAW error: Invalid object number in shapefile\n");
+          return (1);
+        }
+        psShape = SHPReadObject(hSHP, nobj);
+        if (npart < 0 || npart >= psShape->nParts)
+        {
+          SHPClose(hSHP);
+          gaprnt (0,"DRAW error: Invalid part of object number\n");
+          return (1);
+        }
+        pstart = psShape->panPartStart[npart];
+        if (npart == psShape->nParts-1)
+          nvert = psShape->nVertices-pstart;
+        else
+          nvert = psShape->panPartStart[npart+1]-pstart;
+        if (nvert == 0)
+        {
+          SHPDestroyObject(psShape);
+          SHPClose(hSHP);
+          return(0);
+        }
+
+        xy = (float *)malloc(2*sizeof(float)*(nvert+2));
+        if (xy==NULL) {
+          SHPDestroyObject(psShape);
+          SHPClose(hSHP);
+          gaprnt (0,"DRAW error: Memory allocation error\n");
+          return (1);
+        }
+        vcount = 0;
+        for (ivert = 0; ivert < nvert; ivert ++)
+        {
+          shplon = psShape->padfX[ivert+pstart];
+          shplat = psShape->padfY[ivert+pstart];
+          if ((normal_lon(shplon) >= normal_lon(pcm->dmin[0]) &&
+               normal_lon(shplon) <= normal_lon(pcm->dmax[0])) &&
+              (shplat >= pcm->dmin[1] && shplat <= pcm->dmax[1]))
+          {
+            gxconv (normal_lon(shplon), shplat, &x, &y, 2);
+            xy[vcount]   = x;
+            xy[vcount+1] = y;
+            vcount += 2;
+          }
+        }
+        SHPDestroyObject(psShape);
+        if (vcount == 0)
+        {
+          SHPClose(hSHP);
+          free(xy);
+          gaprnt (0,"DRAW warning: Outside window.\n");
+          return (0);
+        }
+      }
+      SHPClose(hSHP);
     }
-    xy = (float *)malloc(sizeof(float)*(i+2));
-    if (xy==NULL) {
-      gaprnt (0,"DRAW error: Memory allocation error\n");
+    else if (narg<6) {
+#else
+    if (narg<6) {
+#endif
+      gaprnt (0,"DRAW error: Syntax is DRAW POLYF x1 y1 x2 y2 ...\n");
       return (1);
     }
-    i = 0;
-    while ( (cmd = nxtwrd(cmd)) != NULL) {
-      if ( valprs(cmd,xy+i) == NULL ) {
-        gaprnt (0,"DRAW error: Invalid polyf coordinate\n");
-        free (xy);
-        return(1);
+    else {
+      xy = (float *)malloc(sizeof(float)*(narg+2));
+      if (xy==NULL) {
+        gaprnt (0,"DRAW error: Memory allocation error\n");
+        return (1);
+      }
+      vcount = 0;
+      while ( (cmd = nxtwrd(cmd)) != NULL) {
+        if ( valprs(cmd,xy+vcount) == NULL ) {
+          gaprnt (0,"DRAW error: Invalid polyf coordinate\n");
+          free (xy);
+          return(1);
+        }
+        vcount++;
       }
-      i++;
     }
-    cnt = i/2;
+    cnt = vcount/2;
     if (*xy != *(xy+(cnt-1)*2) || *(xy+1) != *(xy+(cnt-1)*2+1)) {
       *(xy+cnt*2) = *xy;
       *(xy+cnt*2+1) = *(xy+1);
@@ -1148,8 +1330,8 @@
       gxstyl(1);
       gxcolr (pcm->lincol);
       gxplot (*(xy),*(xy+1),3);
-      for (i=1; i<cnt; i++) {
-        gxplot (*(xy+i*2),*(xy+i*2+1),2);
+      for (vcount=1; vcount<cnt; vcount++) {
+        gxplot (*(xy+vcount*2),*(xy+vcount*2+1),2);
       }
     }
     gxcolr (pcm->lincol);
Index: src/gaddes.c
===================================================================
RCS file: /cvsroot/opengrads/grads/src/gaddes.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 gaddes.c
--- src/gaddes.c	7 Feb 2006 04:07:25 -0000	1.1.1.1
+++ src/gaddes.c	26 Oct 2007 16:41:41 -0000
@@ -40,8 +40,8 @@
 
 void ll2eg (int , int, float *, float, float, float *, float *, float *) ;
 void ll2pse(int, int, float *, float, float, float *, float *);
-void ll2ops (float *, float , float , float *, float *) ;
-
+void ll2ops(float *, float , float , float *, float *) ;
+void ll2rll(float *, float , float , float *, float *, float *);
 
 /* Read a GrADS data descriptor file and fill in the information
    into a gafile structure.  The gafile structure should be
@@ -972,6 +972,7 @@
       else if (cmpwrd("ops",ch))   {pfi->ppflag=6; pfi->ppwrot=0; cnt=8;}
       else if (cmpwrd("bilin",ch)) {pfi->ppflag=7; pfi->ppwrot=1; cnt=0;}
       else if (cmpwrd("file",ch))  {pfi->ppflag=8; pfi->ppwrot=1; cnt=1;}
+      else if (cmpwrd("rll",ch))   {pfi->ppflag=9; pfi->ppwrot=1; cnt=7;}
       else goto errm;
       /* parse the pre-projected grid parameters */
       for (i=0; i<cnt; i++) {
@@ -2270,6 +2271,8 @@
           ll2pse (pfi->ppisiz,pfi->ppjsiz,pfi->ppvals, lon, lat, &rii, &rjj);
         } else if (pfi->ppflag==6) {       /* PDEF ops */  
           ll2ops (pfi->ppvals, lon, lat, &rii, &rjj);
+        } else if (pfi->ppflag==9) {       /* PDEF rll */  
+          ll2rll (pfi->ppvals, lon, lat, &rii, &rjj, dw);
         } else {                           /* PDEF nps and sps */
           w3fb04(lat, -1.0*lon, pfi->ppvals[3], -1.0*pfi->ppvals[2], &rii, &rjj);
           rii = rii + pfi->ppvals[0];  /* Normalize based on pole point */ 
@@ -2660,6 +2663,47 @@
 
 }
 
+void ll2rll (float *vals, float lni, float lti, float*grdi,
+	     float *grdj, float *alpha) {
+  double a, b, r;
+  double p1, g1, p, g, z;
+  double xrl, rlon, rlat;
+  const static double DEG2RAD = M_PI/180.0;
+  const static double RAD2DEG =180.0/M_PI;
+  double polelat = *(vals+0);
+  double polelon = *(vals+1);
+  double rotation = *(vals+2);
+  double swlat = *(vals+3);
+  double swlon = *(vals+4);
+  double deltalat = *(vals+5);
+  double deltalon = *(vals+6);
+
+  a = (90.0 + polelat) * DEG2RAD;
+  b = polelon * DEG2RAD;
+  r = rotation * DEG2RAD;
+
+  p1 = DEG2RAD * lti;
+  g1 = -DEG2RAD * lni;
+  p = asin( sin(a) * sin(p1) + cos(a) * cos(p1) * cos (g1 + b) );
+  g = r + atan2(cos(p1) * sin (g1 + b),
+          sin(a) * cos(p1) * cos (g1 + b) - cos(a) * sin(p1) );
+  rlat = RAD2DEG * asin( -cos(p) * cos (g) );
+  xrl = -atan2(cos(p) * sin (g), sin(p) );
+  rlon = RAD2DEG * xrl;
+
+  *grdi = (rlon - swlon) / deltalon + 1;
+  *grdj = (rlat - swlat) / deltalat + 1;
+
+  z = - sin(a)*sin(g1-b)*sin(xrl) - cos(g1-b)*cos(xrl);
+  if (z >  1.0) z =  1.0;
+  if (z < -1.0) z = -1.0;
+
+  *alpha = acos(z);
+  if ( (-(lni - (polelon-180.0)) < 0) && (-(lni- (polelon-180.0)) >= -180.0) )
+	  *alpha = - *alpha;
+  return;
+}
+
 void ll2ops(float *vals, float lni, float lti, float *grdi, float *grdj) {
 
   const float radius = 6371229.0 ;
